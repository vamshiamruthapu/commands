---------------------centos installation------------------------------
yum update -y
yum install git
git config --global user.name "Vamshi"
git config --global user.email vamshi@gmail.comgit status
yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine
yum install -y yum-utils
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
systemctl start docker
systemctl status docker
systemctl stop docker
systemctl status docker
git branch
git add .
git commit -m "added docker stop and status"
git log
git push origin main
hello hai 
am git 
git hub [username :- vamshiamruthapu]
git hub [password :- Vamshi@101]
docker hub [username :- vamshiamruthapu]
docker hub [password :- Vamshi@12345]

-----------ubuntu installation-----------------------------------
apt-get update
apt-get install ca-certificates curl gnupg
sudo apt-get install ca-certificates curl gnupg
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
chmod a+r /etc/apt/keyrings/docker.gpg
echo   "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
"$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" |   tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo docker run hello-world
--------------------------------------------------------------------------
----------------------debian os installation ----------------------------------------------
for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done
2  sudo apt-get update
3  sudo apt-get install ca-certificates curl gnupg
4  sudo install -m 0755 -d /etc/apt/keyrings
5  curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
6  sudo chmod a+r /etc/apt/keyrings/docker.gpg
7  echo   "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
"$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
8  echo   "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
"$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
9  sudo apt-get update
10  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
11  sudo docker run hello-world

-----------------docker commands-----------------------------------------
Common Commands:
  run         Create and run a new container from an image
  exec        Execute a command in a running container
  ps          List containers
  build       Build an image from a Dockerfile
  pull        Download an image from a registry
  push        Upload an image to a registry
  images      List images
  login       Log in to a registry
  logout      Log out from a registry
  search      Search Docker Hub for images
  version     Show the Docker version information
  info        Display system-wide information

Management Commands:
  builder     Manage builds
  buildx*     Docker Buildx (Docker Inc., v0.11.2)
  compose*    Docker Compose (Docker Inc., v2.21.0)
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  plugin      Manage plugins
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Swarm Commands:
  swarm       Manage Swarm

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  wait        Block until one or more containers stop, then print their exit codes

Global Options:
      --config string      Location of client config files (default "/root/.docker")
  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket to connect to
  -l, --log-level string   Set the logging level ("debug", "info", "warn", "error", "fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/root/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/root/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/root/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit


------------------docker volume creation process----------------------------------
cat /etc/os-release
   86  docker ps -a
   87  docker rm -f $(docker ps -aq)
   88  docekr images
   89  docker images
   90  docker rmi -f $(docker images -aq)
   91  docker images
   92  docker ps -a
   93  vi abc.txt
   94  cat abc.txt
   95  mkdir abc
   96  mv abc.txt abc
   97  ls -l
   98  docker run -it -v abc:/tmp/abc --name volumes-demo ubuntu:22.04 bash
   99  docker rmi -f $(docker images -aq)
  100  docker run -it -v ./abc:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  101  docker rm -f $(docker ps -aq)
  102  docker run -it -v ./abc:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  103  cat abc/abc.txt
  104  docker rm -f $(docker ps -aq)
  105  mkdir def
  106  docker run -it -v ./def:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  107  ls -l def/
  108  docker rm -f $(docker ps -aq)
  109  ls -l def/
  110  cat def/def.txt
  111  docker run -it -v ./def:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  112  cat def/def.txt
  113  docker run -it -v ./def:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  114  docker run -it -v ./def:/tmp/abc --name volumes-demo1 ubuntu:22.04 bash
  115  ls -l
  116  ls -l def
  117  ls -l def/xyz/
  118  ls -l def/xyz/xyz.txt
  119  cat def/xyz/xyz.txt
  120  docker rmi -f $(docker images -aq)
  121  docker rm -f $(docker ps -aq)
  122  docker volume create --help
  123  docker volume create test-volume
  124  docker volume ls
  125  docker run -it -v test-volume:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  126  docker volume --help
  127  docker volume prune
  128  docker volume ls
  129  docker volume --help
  130  docker volume inspect test-volume
  131  ls -l /var/lib/docker/volumes/test-volume/_data
  132  ls -l /var/lib/docker/volumes/test-volume/
  133  ls -l /var/lib/docker/volumes/abc/
  134  ls -l /var/lib/docker/volumes/abc/_data/
  135  docker history
  136  his
