---------------------centos installation------------------------------
yum update -y
yum install git
git config --global user.name "Vamshi"
git config --global user.email vamshi@gmail.comgit status
yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine
yum install -y yum-utils
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
systemctl start docker
systemctl status docker
systemctl stop docker
systemctl status docker
git branch
git add .
git commit -m "added docker stop and status"
git log
git push origin main
hello hai 
am git 
git hub [username :- vamshiamruthapu]
git hub [password :- Vamshi@101]
docker hub [username :- vamshiamruthapu]
docker hub [password :- Vamshi@12345]

-----------ubuntu installation-----------------------------------
apt-get update
apt-get install ca-certificates curl gnupg
sudo apt-get install ca-certificates curl gnupg
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
chmod a+r /etc/apt/keyrings/docker.gpg
echo   "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
"$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" |   tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo docker run hello-world

----------------------debian os installation ----------------------------------------------
for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done
2  sudo apt-get update
3  sudo apt-get install ca-certificates curl gnupg
4  sudo install -m 0755 -d /etc/apt/keyrings
5  curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
6  sudo chmod a+r /etc/apt/keyrings/docker.gpg
7  echo   "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
"$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
8  echo   "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
"$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
9  sudo apt-get update
10  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
11  sudo docker run hello-world

--------------------------rockylinux os installation--------------------------
2  sudo dnf update
3  sudo dnf install docker
4  sudo systemctl start docker
5  sudo systemctl enable docker
6  sudo systemctl status docker
7  sudo docker run -d -p 80:80 nginx

-----------------docker commands-----------------------------------------
Common Commands:
  run         Create and run a new container from an image
  exec        Execute a command in a running container
  ps          List containers
  build       Build an image from a Dockerfile
  pull        Download an image from a registry
  push        Upload an image to a registry
  images      List images
  login       Log in to a registry
  logout      Log out from a registry
  search      Search Docker Hub for images
  version     Show the Docker version information
  info        Display system-wide information

Management Commands:
  builder     Manage builds
  buildx*     Docker Buildx (Docker Inc., v0.11.2)
  compose*    Docker Compose (Docker Inc., v2.21.0)
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  plugin      Manage plugins
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Swarm Commands:
  swarm       Manage Swarm

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  wait        Block until one or more containers stop, then print their exit codes

Global Options:
      --config string      Location of client config files (default "/root/.docker")
  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket to connect to
  -l, --log-level string   Set the logging level ("debug", "info", "warn", "error", "fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/root/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/root/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/root/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit


------------------docker volume creation process----------------------------------
cat /etc/os-release
   86  docker ps -a
   87  docker rm -f $(docker ps -aq)
   88  docekr images
   89  docker images
   90  docker rmi -f $(docker images -aq)
   91  docker images
   92  docker ps -a
   93  vi abc.txt
   94  cat abc.txt
   95  mkdir abc
   96  mv abc.txt abc
   97  ls -l
   98  docker run -it -v abc:/tmp/abc --name volumes-demo ubuntu:22.04 bash
   99  docker rmi -f $(docker images -aq)
  100  docker run -it -v ./abc:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  101  docker rm -f $(docker ps -aq)
  102  docker run -it -v ./abc:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  103  cat abc/abc.txt
  104  docker rm -f $(docker ps -aq)
  105  mkdir def
  106  docker run -it -v ./def:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  107  ls -l def/
  108  docker rm -f $(docker ps -aq)
  109  ls -l def/
  110  cat def/def.txt
  111  docker run -it -v ./def:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  112  cat def/def.txt
  113  docker run -it -v ./def:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  114  docker run -it -v ./def:/tmp/abc --name volumes-demo1 ubuntu:22.04 bash
  115  ls -l
  116  ls -l def
  117  ls -l def/xyz/
  118  ls -l def/xyz/xyz.txt
  119  cat def/xyz/xyz.txt
  120  docker rmi -f $(docker images -aq)
  121  docker rm -f $(docker ps -aq)
  122  docker volume create --help
  123  docker volume create test-volume
  124  docker volume ls
  125  docker run -it -v test-volume:/tmp/abc --name volumes-demo ubuntu:22.04 bash
  126  docker volume --help
  127  docker volume prune
  128  docker volume ls
  129  docker volume --help
  130  docker volume inspect test-volume
  131  ls -l /var/lib/docker/volumes/test-volume/_data
  132  ls -l /var/lib/docker/volumes/test-volume/
  133  ls -l /var/lib/docker/volumes/abc/
  134  ls -l /var/lib/docker/volumes/abc/_data/
  135  docker history
  136  his
------git key ---------------
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


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

 java --version
    2  ls -l /opt/jdk-21.0.1/bin/
    3  vi ~/.bashrc
    4  java --version
    5  exit
    6  java --version
    7  vi Main.java
    8  java Main.java
    9  javac Main.java
   10  ls -l
   11  java Main
   12  cat Main.
   13  cat Main.java
   14  javac Main.java
   15  scp Main.class vamshi@
   16  scp Main.class vamshi@172.190.87.225:~
   17  java --version
   18  export PATH=/opt/jdk-17.0.9/bin/:$PATH
   19  java --version
   20  rm -rf Main.class
   21  ls -l
   22  rm -rf vamshi@
   23  ls -l
   24  java --version
   25  javac Main.java
   26  java Main
   27  scp Main.class vamshi@172.190.87.225:~
   28  ls -l /opt/
   29  ls -l/opt/jdk-17.0.9/bin/
   30  ls -l /opt/jdk-17.0.9/bin/
   31  ls -l /usr/bin/
   32  ls -l /usr/bin/ | grep ls
   33  pwd
   34  ls -l /usr/bin/ | grep pwd
   35  ls -l /usr/bin/ | grep cd
   36  which cd
   37  which docker
   38  ls -l /opt/
   39  cat ~/.bashrc
   40  which java
   41  ls -l /opt/jdk-17.0.9/bin/java



 apt-get update
    2  apt-get install ca-certificates curl gnupg
    3  sudo apt-get install ca-certificates curl gnupg
    4  install -m 0755 -d /etc/apt/keyrings
    5  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    6  chmod a+r /etc/apt/keyrings/docker.gpg
    7  echo   "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    8  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" |   tee /etc/apt/sources.list.d/docker.list > /dev/null
    9  apt-get update
   10  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
   11  sudo docker run hello-world
   12  free
   13  free -h
   14  uname -a
   15  wget https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb
   16  ll
   17  pwd
   18  ls -l /root
   19  cd /opt
   20  cd ~
   21  ls -l
   22 w

   23  java --version
   24  wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.deb
   25  dpkg -i jdk-17_linux-x64_bin.deb
   26  java --version
   27  ls -l /usr/lib/jvm/
   28  java --version
   29  javac --version
   30  update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-17-oracle-x64/bin/java
   31  update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-17-oracle-x64/bin/java 1
   32  java --version
   33  update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk-17-oracle-x64/bin/javac 1
   34  java --version
   35  javac --version
   36  update-alternatives --config java
   37  java --version
   38  update-alternatives --config javac
   39  javac --version
   40  java --version
   41  history
   42  update-alternatives --config java
   43  update-alternatives --config javac
   44  java --version
   45  java --veriosn
   46  java --version
   47  vi /home/vamshi/.bashrc
   48  useradd teja
   49  su- teja
   50  su - teja
   51  adduser ravi
   52  cat /etc/passwd
   53  update-alternatives --config java
   54  java --version
   55  which java
   56  ls -l /usr/bin/java
   57  ls -l /etc/alternatives/java
   58  ls -l /usr/lib/jvm/jdk-17-oracle-x64/bin/java
   59  ln -s /usr/lib/jvm/jdk-21-oracle-x64/bin/java /etc/alternatives/java
   60  rm -rf /etc/alternatives/java
   61  ll  
   62  java --version
   63  which update-alternatives
   64  cat /usr/bin/update-alternatives
   65  ls -l /usr/bin/java
   66  ls -l /etc/alternatives/java
   67  ls -l /usr/lib/jvm/jdk-21-oracle-x64/bin/java
   68 

   69  java --version
 
  wget https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb
   13  ls -l /opt
   14  ls -l /opt/
   15  ls -l /root
   16  dpkg -i jdk-21_linux-x64_bin.deb
   17  java --version

-----------------------maven--------------------------

    tar -xvzf apache-maven-3.9.5-bin.zip
   21  tar -xvf apache-maven-3.9.5-bin.zip
   22  rm -f
   23  -rw-r--r--  1 root root 156654496 Oct 10 22:23 jdk-17_linux-x64_bin.deb
   24  -rw-r--r--  1 root root 167684844 Oct  9 17:06 jdk-21_linux-x64_bin.deb
   25  drwx------  3 root root      4096 Nov 21 10:58 snap/
   26  rm -f apache-maven-3.9.5-bin.zip
   27  ll
   28  wget https://dlcdn.apache.org/maven/maven-3/3.9.5/binaries/apache-maven-3.9.5-bin.tar.gz
   29  ll
   30  tar -xvzf apache-maven-3.9.5-bin.tar.gz
   31  ll
   32  cd apache-maven-3.9.5/
   33  ll
   34  cd bin/
   35  ll
   36  cd ..
   37  cd
   38  mvn
   39  ll
   40  cd apache-maven-3.9.5/
   41  mvn
   42  cd
   43  cd /etc/profile.d/
   44  vi maven.sh
   45  ll
   46  chmod 777 maven.sh
   47  ll
   48  mvn
   49  source maven.sh
   50  mvn -version
   51  ll
   52  cd
   53  ll
   54  ls -l /root
   55  vi maven.sh
   56  cd /etc/profile.d/
   57  vi maven.sh
   58  ll
   59  mvn
   60  source maven.sh
   61  mvn -version
   62  cd
   63  mvn
   64  ll
   65  cat maven.sh
   66  cd /etc/profile.d/
   67  ll
   68  cat maven.sh
   69  vi maven.sh
   70  source maven.sh
   71  mvn
   72  mvn -version
   73  cd
   74  mvn
   75  mvn -version
   76  java
   77  which java
   78  ls -l /usr/bin/java
   79  ls -l /etc/alternatives/java
   80  ls -l /usr/lib/jvm/jdk-21-oracle-x64/bin/java
   81  ln -s /root/apache-maven-3.9.5/bin/mvn /usr/bin/mvn
   82  ls -l /usr/bin/mvn
   83  echo $PATH
   84  cat /etc/profile.d/maven.sh
   85  exit
   86  ls -l
   87  chmod 77 -R apache-maven-3.9.5
   88  ls -l
   89  exit
   90  reboot
   91  cd /etc/profile.d
   92  ls -l
   93  mv maven.sh ~
   94  ls -l
   95  exit
   96  echo $PATH
   97  mvn --version
   98  mv apache-maven-3.9.5 /opt/
   99  ls -l
  100  mvn -version
  101  ln -sf /opt/apache-maven-3.9.5/bin/mvn /usr/bin/mvn
  102  ls -l /usr/bin/mn
  103  ls -l /usr/bin/mvn
  104  mvn --version
  105  exit
  106  adduser teja
  107  mvn --version
  108  mv /home/teja/apache-maven-3.8.8 /opt/
  109  ls -l /opt/
  110  chmod 777 -R /opt/apache-maven-3.8.8/

 mvn --version
    2  wget https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz
    3  ls -l
    4  tar -xvzf apache-maven-3.8.8-bin.tar.gz
    5  export MVN_HOME=/home/teja/apache-maven-3.8.8
    6  export PATH=${MVN_HOME}/bin:$PATH
    7  echo $PATH
    8  mvn -version
    9  sudo su -
   10  exit
   11  mvn
   12  mvn -version
   13  export MVN_HOME=/opt/apache-maven-3.8.8
   14  export PATH=${MVN_HOME}/bin:$PATH
   15  mvn -version






  

